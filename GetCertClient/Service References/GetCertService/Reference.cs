//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GetCert2.GetCertService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GetCertService.IGetCertService")]
    public interface IGetCertService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/bClientCheckIn", ReplyAction="http://tempuri.org/IGetCertService/bClientCheckInResponse")]
        bool bClientCheckIn(string asHash, byte[] abtArrayProfile, byte[] abtArrayErrorLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/bClientCheckIn", ReplyAction="http://tempuri.org/IGetCertService/bClientCheckInResponse")]
        System.Threading.Tasks.Task<bool> bClientCheckInAsync(string asHash, byte[] abtArrayProfile, byte[] abtArrayErrorLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/bLockCertificateRenewal", ReplyAction="http://tempuri.org/IGetCertService/bLockCertificateRenewalResponse")]
        bool bLockCertificateRenewal(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/bLockCertificateRenewal", ReplyAction="http://tempuri.org/IGetCertService/bLockCertificateRenewalResponse")]
        System.Threading.Tasks.Task<bool> bLockCertificateRenewalAsync(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/bNewCertificateUploaded", ReplyAction="http://tempuri.org/IGetCertService/bNewCertificateUploadedResponse")]
        bool bNewCertificateUploaded(string asHash, byte[] abtArrayProfile, byte[] abtArrayCertificate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/bNewCertificateUploaded", ReplyAction="http://tempuri.org/IGetCertService/bNewCertificateUploadedResponse")]
        System.Threading.Tasks.Task<bool> bNewCertificateUploadedAsync(string asHash, byte[] abtArrayProfile, byte[] abtArrayCertificate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/bOldCertificateRemoved", ReplyAction="http://tempuri.org/IGetCertService/bOldCertificateRemovedResponse")]
        bool bOldCertificateRemoved(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/bOldCertificateRemoved", ReplyAction="http://tempuri.org/IGetCertService/bOldCertificateRemovedResponse")]
        System.Threading.Tasks.Task<bool> bOldCertificateRemovedAsync(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/bSetSsoThumbprint", ReplyAction="http://tempuri.org/IGetCertService/bSetSsoThumbprintResponse")]
        bool bSetSsoThumbprint(string asHash, byte[] abtArrayProfile, string asSsoThumbprint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/bSetSsoThumbprint", ReplyAction="http://tempuri.org/IGetCertService/bSetSsoThumbprintResponse")]
        System.Threading.Tasks.Task<bool> bSetSsoThumbprintAsync(string asHash, byte[] abtArrayProfile, string asSsoThumbprint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/bUnlockCertificateRenewal", ReplyAction="http://tempuri.org/IGetCertService/bUnlockCertificateRenewalResponse")]
        bool bUnlockCertificateRenewal(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/bUnlockCertificateRenewal", ReplyAction="http://tempuri.org/IGetCertService/bUnlockCertificateRenewalResponse")]
        System.Threading.Tasks.Task<bool> bUnlockCertificateRenewalAsync(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/btArrayGetCertExeUpdate", ReplyAction="http://tempuri.org/IGetCertService/btArrayGetCertExeUpdateResponse")]
        byte[] btArrayGetCertExeUpdate(string asHash, byte[] abtArrayProfile, string asInstalledVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/btArrayGetCertExeUpdate", ReplyAction="http://tempuri.org/IGetCertService/btArrayGetCertExeUpdateResponse")]
        System.Threading.Tasks.Task<byte[]> btArrayGetCertExeUpdateAsync(string asHash, byte[] abtArrayProfile, string asInstalledVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/btArrayGoPcBackupExeUpdate", ReplyAction="http://tempuri.org/IGetCertService/btArrayGoPcBackupExeUpdateResponse")]
        byte[] btArrayGoPcBackupExeUpdate(string asHash, byte[] abtArrayProfile, string asInstalledVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/btArrayGoPcBackupExeUpdate", ReplyAction="http://tempuri.org/IGetCertService/btArrayGoPcBackupExeUpdateResponse")]
        System.Threading.Tasks.Task<byte[]> btArrayGoPcBackupExeUpdateAsync(string asHash, byte[] abtArrayProfile, string asInstalledVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/btArrayNewCertificate", ReplyAction="http://tempuri.org/IGetCertService/btArrayNewCertificateResponse")]
        byte[] btArrayNewCertificate(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/btArrayNewCertificate", ReplyAction="http://tempuri.org/IGetCertService/btArrayNewCertificateResponse")]
        System.Threading.Tasks.Task<byte[]> btArrayNewCertificateAsync(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/sCfgUpdate", ReplyAction="http://tempuri.org/IGetCertService/sCfgUpdateResponse")]
        string sCfgUpdate(string asHash, byte[] abtArrayProfile, string asInstalledVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/sCfgUpdate", ReplyAction="http://tempuri.org/IGetCertService/sCfgUpdateResponse")]
        System.Threading.Tasks.Task<string> sCfgUpdateAsync(string asHash, byte[] abtArrayProfile, string asInstalledVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/sDomainProfile", ReplyAction="http://tempuri.org/IGetCertService/sDomainProfileResponse")]
        string sDomainProfile(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/sDomainProfile", ReplyAction="http://tempuri.org/IGetCertService/sDomainProfileResponse")]
        System.Threading.Tasks.Task<string> sDomainProfileAsync(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/sGpcIniUpdate", ReplyAction="http://tempuri.org/IGetCertService/sGpcIniUpdateResponse")]
        string sGpcIniUpdate(string asHash, byte[] abtArrayProfile, string asInstalledVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/sGpcIniUpdate", ReplyAction="http://tempuri.org/IGetCertService/sGpcIniUpdateResponse")]
        System.Threading.Tasks.Task<string> sGpcIniUpdateAsync(string asHash, byte[] abtArrayProfile, string asInstalledVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/sHostsEntryUpdate", ReplyAction="http://tempuri.org/IGetCertService/sHostsEntryUpdateResponse")]
        string sHostsEntryUpdate(string asHash, byte[] abtArrayProfile, string asInstalledVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/sHostsEntryUpdate", ReplyAction="http://tempuri.org/IGetCertService/sHostsEntryUpdateResponse")]
        System.Threading.Tasks.Task<string> sHostsEntryUpdateAsync(string asHash, byte[] abtArrayProfile, string asInstalledVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/sIniUpdate", ReplyAction="http://tempuri.org/IGetCertService/sIniUpdateResponse")]
        string sIniUpdate(string asHash, byte[] abtArrayProfile, string asInstalledVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/sIniUpdate", ReplyAction="http://tempuri.org/IGetCertService/sIniUpdateResponse")]
        System.Threading.Tasks.Task<string> sIniUpdateAsync(string asHash, byte[] abtArrayProfile, string asInstalledVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifyCertOverrideCertificateReady", ReplyAction="http://tempuri.org/IGetCertService/NotifyCertOverrideCertificateReadyResponse")]
        void NotifyCertOverrideCertificateReady(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifyCertOverrideCertificateReady", ReplyAction="http://tempuri.org/IGetCertService/NotifyCertOverrideCertificateReadyResponse")]
        System.Threading.Tasks.Task NotifyCertOverrideCertificateReadyAsync(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificateExeFailure", ReplyAction="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificateExeFailureRespons" +
            "e")]
        void NotifyLoadBalancerCertificateExeFailure(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificateExeFailure", ReplyAction="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificateExeFailureRespons" +
            "e")]
        System.Threading.Tasks.Task NotifyLoadBalancerCertificateExeFailureAsync(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificateExeSuccess", ReplyAction="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificateExeSuccessRespons" +
            "e")]
        void NotifyLoadBalancerCertificateExeSuccess(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificateExeSuccess", ReplyAction="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificateExeSuccessRespons" +
            "e")]
        System.Threading.Tasks.Task NotifyLoadBalancerCertificateExeSuccessAsync(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificatePending", ReplyAction="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificatePendingResponse")]
        void NotifyLoadBalancerCertificatePending(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificatePending", ReplyAction="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificatePendingResponse")]
        System.Threading.Tasks.Task NotifyLoadBalancerCertificatePendingAsync(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificateReady", ReplyAction="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificateReadyResponse")]
        void NotifyLoadBalancerCertificateReady(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificateReady", ReplyAction="http://tempuri.org/IGetCertService/NotifyLoadBalancerCertificateReadyResponse")]
        System.Threading.Tasks.Task NotifyLoadBalancerCertificateReadyAsync(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifySsoThumbprintReplacementFailure", ReplyAction="http://tempuri.org/IGetCertService/NotifySsoThumbprintReplacementFailureResponse")]
        void NotifySsoThumbprintReplacementFailure(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifySsoThumbprintReplacementFailure", ReplyAction="http://tempuri.org/IGetCertService/NotifySsoThumbprintReplacementFailureResponse")]
        System.Threading.Tasks.Task NotifySsoThumbprintReplacementFailureAsync(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifySsoThumbprintReplacementSuccess", ReplyAction="http://tempuri.org/IGetCertService/NotifySsoThumbprintReplacementSuccessResponse")]
        void NotifySsoThumbprintReplacementSuccess(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/NotifySsoThumbprintReplacementSuccess", ReplyAction="http://tempuri.org/IGetCertService/NotifySsoThumbprintReplacementSuccessResponse")]
        System.Threading.Tasks.Task NotifySsoThumbprintReplacementSuccessAsync(string asHash, byte[] abtArrayProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/ReportErrors", ReplyAction="http://tempuri.org/IGetCertService/ReportErrorsResponse")]
        void ReportErrors(string asHash, byte[] abtArrayProfile, byte[] abtArrayErrorLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/ReportErrors", ReplyAction="http://tempuri.org/IGetCertService/ReportErrorsResponse")]
        System.Threading.Tasks.Task ReportErrorsAsync(string asHash, byte[] abtArrayProfile, byte[] abtArrayErrorLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/ReportEverything", ReplyAction="http://tempuri.org/IGetCertService/ReportEverythingResponse")]
        void ReportEverything(string asHash, byte[] abtArrayProfile, byte[] abtArrayClientLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetCertService/ReportEverything", ReplyAction="http://tempuri.org/IGetCertService/ReportEverythingResponse")]
        System.Threading.Tasks.Task ReportEverythingAsync(string asHash, byte[] abtArrayProfile, byte[] abtArrayClientLog);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGetCertServiceChannel : GetCert2.GetCertService.IGetCertService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCertServiceClient : System.ServiceModel.ClientBase<GetCert2.GetCertService.IGetCertService>, GetCert2.GetCertService.IGetCertService {
        
        public GetCertServiceClient() {
        }
        
        public GetCertServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GetCertServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GetCertServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GetCertServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool bClientCheckIn(string asHash, byte[] abtArrayProfile, byte[] abtArrayErrorLog) {
            return base.Channel.bClientCheckIn(asHash, abtArrayProfile, abtArrayErrorLog);
        }
        
        public System.Threading.Tasks.Task<bool> bClientCheckInAsync(string asHash, byte[] abtArrayProfile, byte[] abtArrayErrorLog) {
            return base.Channel.bClientCheckInAsync(asHash, abtArrayProfile, abtArrayErrorLog);
        }
        
        public bool bLockCertificateRenewal(string asHash, byte[] abtArrayProfile) {
            return base.Channel.bLockCertificateRenewal(asHash, abtArrayProfile);
        }
        
        public System.Threading.Tasks.Task<bool> bLockCertificateRenewalAsync(string asHash, byte[] abtArrayProfile) {
            return base.Channel.bLockCertificateRenewalAsync(asHash, abtArrayProfile);
        }
        
        public bool bNewCertificateUploaded(string asHash, byte[] abtArrayProfile, byte[] abtArrayCertificate) {
            return base.Channel.bNewCertificateUploaded(asHash, abtArrayProfile, abtArrayCertificate);
        }
        
        public System.Threading.Tasks.Task<bool> bNewCertificateUploadedAsync(string asHash, byte[] abtArrayProfile, byte[] abtArrayCertificate) {
            return base.Channel.bNewCertificateUploadedAsync(asHash, abtArrayProfile, abtArrayCertificate);
        }
        
        public bool bOldCertificateRemoved(string asHash, byte[] abtArrayProfile) {
            return base.Channel.bOldCertificateRemoved(asHash, abtArrayProfile);
        }
        
        public System.Threading.Tasks.Task<bool> bOldCertificateRemovedAsync(string asHash, byte[] abtArrayProfile) {
            return base.Channel.bOldCertificateRemovedAsync(asHash, abtArrayProfile);
        }
        
        public bool bSetSsoThumbprint(string asHash, byte[] abtArrayProfile, string asSsoThumbprint) {
            return base.Channel.bSetSsoThumbprint(asHash, abtArrayProfile, asSsoThumbprint);
        }
        
        public System.Threading.Tasks.Task<bool> bSetSsoThumbprintAsync(string asHash, byte[] abtArrayProfile, string asSsoThumbprint) {
            return base.Channel.bSetSsoThumbprintAsync(asHash, abtArrayProfile, asSsoThumbprint);
        }
        
        public bool bUnlockCertificateRenewal(string asHash, byte[] abtArrayProfile) {
            return base.Channel.bUnlockCertificateRenewal(asHash, abtArrayProfile);
        }
        
        public System.Threading.Tasks.Task<bool> bUnlockCertificateRenewalAsync(string asHash, byte[] abtArrayProfile) {
            return base.Channel.bUnlockCertificateRenewalAsync(asHash, abtArrayProfile);
        }
        
        public byte[] btArrayGetCertExeUpdate(string asHash, byte[] abtArrayProfile, string asInstalledVersion) {
            return base.Channel.btArrayGetCertExeUpdate(asHash, abtArrayProfile, asInstalledVersion);
        }
        
        public System.Threading.Tasks.Task<byte[]> btArrayGetCertExeUpdateAsync(string asHash, byte[] abtArrayProfile, string asInstalledVersion) {
            return base.Channel.btArrayGetCertExeUpdateAsync(asHash, abtArrayProfile, asInstalledVersion);
        }
        
        public byte[] btArrayGoPcBackupExeUpdate(string asHash, byte[] abtArrayProfile, string asInstalledVersion) {
            return base.Channel.btArrayGoPcBackupExeUpdate(asHash, abtArrayProfile, asInstalledVersion);
        }
        
        public System.Threading.Tasks.Task<byte[]> btArrayGoPcBackupExeUpdateAsync(string asHash, byte[] abtArrayProfile, string asInstalledVersion) {
            return base.Channel.btArrayGoPcBackupExeUpdateAsync(asHash, abtArrayProfile, asInstalledVersion);
        }
        
        public byte[] btArrayNewCertificate(string asHash, byte[] abtArrayProfile) {
            return base.Channel.btArrayNewCertificate(asHash, abtArrayProfile);
        }
        
        public System.Threading.Tasks.Task<byte[]> btArrayNewCertificateAsync(string asHash, byte[] abtArrayProfile) {
            return base.Channel.btArrayNewCertificateAsync(asHash, abtArrayProfile);
        }
        
        public string sCfgUpdate(string asHash, byte[] abtArrayProfile, string asInstalledVersion) {
            return base.Channel.sCfgUpdate(asHash, abtArrayProfile, asInstalledVersion);
        }
        
        public System.Threading.Tasks.Task<string> sCfgUpdateAsync(string asHash, byte[] abtArrayProfile, string asInstalledVersion) {
            return base.Channel.sCfgUpdateAsync(asHash, abtArrayProfile, asInstalledVersion);
        }
        
        public string sDomainProfile(string asHash, byte[] abtArrayProfile) {
            return base.Channel.sDomainProfile(asHash, abtArrayProfile);
        }
        
        public System.Threading.Tasks.Task<string> sDomainProfileAsync(string asHash, byte[] abtArrayProfile) {
            return base.Channel.sDomainProfileAsync(asHash, abtArrayProfile);
        }
        
        public string sGpcIniUpdate(string asHash, byte[] abtArrayProfile, string asInstalledVersion) {
            return base.Channel.sGpcIniUpdate(asHash, abtArrayProfile, asInstalledVersion);
        }
        
        public System.Threading.Tasks.Task<string> sGpcIniUpdateAsync(string asHash, byte[] abtArrayProfile, string asInstalledVersion) {
            return base.Channel.sGpcIniUpdateAsync(asHash, abtArrayProfile, asInstalledVersion);
        }
        
        public string sHostsEntryUpdate(string asHash, byte[] abtArrayProfile, string asInstalledVersion) {
            return base.Channel.sHostsEntryUpdate(asHash, abtArrayProfile, asInstalledVersion);
        }
        
        public System.Threading.Tasks.Task<string> sHostsEntryUpdateAsync(string asHash, byte[] abtArrayProfile, string asInstalledVersion) {
            return base.Channel.sHostsEntryUpdateAsync(asHash, abtArrayProfile, asInstalledVersion);
        }
        
        public string sIniUpdate(string asHash, byte[] abtArrayProfile, string asInstalledVersion) {
            return base.Channel.sIniUpdate(asHash, abtArrayProfile, asInstalledVersion);
        }
        
        public System.Threading.Tasks.Task<string> sIniUpdateAsync(string asHash, byte[] abtArrayProfile, string asInstalledVersion) {
            return base.Channel.sIniUpdateAsync(asHash, abtArrayProfile, asInstalledVersion);
        }
        
        public void NotifyCertOverrideCertificateReady(string asHash, byte[] abtArrayProfile) {
            base.Channel.NotifyCertOverrideCertificateReady(asHash, abtArrayProfile);
        }
        
        public System.Threading.Tasks.Task NotifyCertOverrideCertificateReadyAsync(string asHash, byte[] abtArrayProfile) {
            return base.Channel.NotifyCertOverrideCertificateReadyAsync(asHash, abtArrayProfile);
        }
        
        public void NotifyLoadBalancerCertificateExeFailure(string asHash, byte[] abtArrayProfile) {
            base.Channel.NotifyLoadBalancerCertificateExeFailure(asHash, abtArrayProfile);
        }
        
        public System.Threading.Tasks.Task NotifyLoadBalancerCertificateExeFailureAsync(string asHash, byte[] abtArrayProfile) {
            return base.Channel.NotifyLoadBalancerCertificateExeFailureAsync(asHash, abtArrayProfile);
        }
        
        public void NotifyLoadBalancerCertificateExeSuccess(string asHash, byte[] abtArrayProfile) {
            base.Channel.NotifyLoadBalancerCertificateExeSuccess(asHash, abtArrayProfile);
        }
        
        public System.Threading.Tasks.Task NotifyLoadBalancerCertificateExeSuccessAsync(string asHash, byte[] abtArrayProfile) {
            return base.Channel.NotifyLoadBalancerCertificateExeSuccessAsync(asHash, abtArrayProfile);
        }
        
        public void NotifyLoadBalancerCertificatePending(string asHash, byte[] abtArrayProfile) {
            base.Channel.NotifyLoadBalancerCertificatePending(asHash, abtArrayProfile);
        }
        
        public System.Threading.Tasks.Task NotifyLoadBalancerCertificatePendingAsync(string asHash, byte[] abtArrayProfile) {
            return base.Channel.NotifyLoadBalancerCertificatePendingAsync(asHash, abtArrayProfile);
        }
        
        public void NotifyLoadBalancerCertificateReady(string asHash, byte[] abtArrayProfile) {
            base.Channel.NotifyLoadBalancerCertificateReady(asHash, abtArrayProfile);
        }
        
        public System.Threading.Tasks.Task NotifyLoadBalancerCertificateReadyAsync(string asHash, byte[] abtArrayProfile) {
            return base.Channel.NotifyLoadBalancerCertificateReadyAsync(asHash, abtArrayProfile);
        }
        
        public void NotifySsoThumbprintReplacementFailure(string asHash, byte[] abtArrayProfile) {
            base.Channel.NotifySsoThumbprintReplacementFailure(asHash, abtArrayProfile);
        }
        
        public System.Threading.Tasks.Task NotifySsoThumbprintReplacementFailureAsync(string asHash, byte[] abtArrayProfile) {
            return base.Channel.NotifySsoThumbprintReplacementFailureAsync(asHash, abtArrayProfile);
        }
        
        public void NotifySsoThumbprintReplacementSuccess(string asHash, byte[] abtArrayProfile) {
            base.Channel.NotifySsoThumbprintReplacementSuccess(asHash, abtArrayProfile);
        }
        
        public System.Threading.Tasks.Task NotifySsoThumbprintReplacementSuccessAsync(string asHash, byte[] abtArrayProfile) {
            return base.Channel.NotifySsoThumbprintReplacementSuccessAsync(asHash, abtArrayProfile);
        }
        
        public void ReportErrors(string asHash, byte[] abtArrayProfile, byte[] abtArrayErrorLog) {
            base.Channel.ReportErrors(asHash, abtArrayProfile, abtArrayErrorLog);
        }
        
        public System.Threading.Tasks.Task ReportErrorsAsync(string asHash, byte[] abtArrayProfile, byte[] abtArrayErrorLog) {
            return base.Channel.ReportErrorsAsync(asHash, abtArrayProfile, abtArrayErrorLog);
        }
        
        public void ReportEverything(string asHash, byte[] abtArrayProfile, byte[] abtArrayClientLog) {
            base.Channel.ReportEverything(asHash, abtArrayProfile, abtArrayClientLog);
        }
        
        public System.Threading.Tasks.Task ReportEverythingAsync(string asHash, byte[] abtArrayProfile, byte[] abtArrayClientLog) {
            return base.Channel.ReportEverythingAsync(asHash, abtArrayProfile, abtArrayClientLog);
        }
    }
}
